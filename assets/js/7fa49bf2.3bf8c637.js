"use strict";(self.webpackChunksynmetrix=self.webpackChunksynmetrix||[]).push([[2239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=i,m=d["".concat(c,".").concat(g)]||d[g]||p[g]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=g;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7184:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={id:"trino",title:"Trino",slug:"/testing-and-debugging/tests/data-source/trino",sidebar_label:"Trino"},a=void 0,s={unversionedId:"testing-and-debugging /tests/data-source/trino/trino",id:"testing-and-debugging /tests/data-source/trino/trino",title:"Trino",description:"Tested on the trinodb/trino:latest image.",source:"@site/docs/testing-and-debugging /tests/data-source/trino/index.md",sourceDirName:"testing-and-debugging /tests/data-source/trino",slug:"/testing-and-debugging/tests/data-source/trino",permalink:"/docs/next/testing-and-debugging/tests/data-source/trino",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/testing-and-debugging /tests/data-source/trino/index.md",tags:[],version:"current",frontMatter:{id:"trino",title:"Trino",slug:"/testing-and-debugging/tests/data-source/trino",sidebar_label:"Trino"},sidebar:"tutorialSidebar",previous:{title:"Snowflake",permalink:"/docs/next/testing-and-debugging/tests/data-source/snowflake"},next:{title:"Test SQL Interface for Data Models",permalink:"/docs/next/testing-and-debugging/testing/test-sql-data-models"}},c={},l=[{value:"Step 1: Navigate to the Trino example directory",id:"step-1-navigate-to-the-trino-example-directory",level:2},{value:"Step 2: Run the Trino service using the script",id:"step-2-run-the-trino-service-using-the-script",level:2},{value:"Step 3: Add a data source in the Synmetrix UI",id:"step-3-add-a-data-source-in-the-synmetrix-ui",level:2},{value:"Step 4: Test the connection",id:"step-4-test-the-connection",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tested on the ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/trinodb/trino"},"trinodb/trino:latest")," image."),(0,i.kt)("h2",{id:"step-1-navigate-to-the-trino-example-directory"},"Step 1: Navigate to the Trino example directory"),(0,i.kt)("p",null,"Navigate to the Trino example directory located at ",(0,i.kt)("inlineCode",{parentName:"p"},"/docs/examples/trino")," in the root of the Synmetrix project. You can also download this directory from the GitHub repository. To navigate to the directory, run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd ./docs/examples/trino\n")),(0,i.kt)("h2",{id:"step-2-run-the-trino-service-using-the-script"},"Step 2: Run the Trino service using the script"),(0,i.kt)("p",null,"In the Trino example directory, there is a script called ",(0,i.kt)("inlineCode",{parentName:"p"},"run_trino.sh"),". Make sure the script is executable by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x run_trino.sh\n")),(0,i.kt)("p",null,"Then, start the Trino service by running the script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./run_trino.sh\n")),(0,i.kt)("p",null,"After the script has finished running, it will return the host IP address of your machine. Take note of this IP address for the next step."),(0,i.kt)("h2",{id:"step-3-add-a-data-source-in-the-synmetrix-ui"},"Step 3: Add a data source in the Synmetrix UI"),(0,i.kt)("p",null,"Go to the Synmetrix UI and add a new data source with the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Name: Trino Test"),(0,i.kt)("li",{parentName:"ul"},"Host: Host IP (obtained from the script in Step 2)"),(0,i.kt)("li",{parentName:"ul"},"Port: 8050"),(0,i.kt)("li",{parentName:"ul"},"Catalog: tpch"),(0,i.kt)("li",{parentName:"ul"},"User: user")),(0,i.kt)("h2",{id:"step-4-test-the-connection"},"Step 4: Test the connection"),(0,i.kt)("p",null,'Click the "Check connection" button in the Synmetrix UI to verify the connection to the Trino data source. If the connection is successful, you will see a confirmation message.'))}p.isMDXComponent=!0}}]);