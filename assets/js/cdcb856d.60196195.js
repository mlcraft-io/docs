"use strict";(self.webpackChunksynmetrix=self.webpackChunksynmetrix||[]).push([[3546],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,g=d["".concat(o,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={id:"data-models",title:"Data Models",slug:"/core-concepts/data-models",sidebar_position:1,description:"Data models are the foundation of the Synmetrix platform. They are used to define the structure of data and the relationships between different types of data."},s="Getting Started with Data Modeling in Synmetrix",l={unversionedId:"core-concepts/data-models/data-models",id:"version-1.0.0/core-concepts/data-models/data-models",title:"Data Models",description:"Data models are the foundation of the Synmetrix platform. They are used to define the structure of data and the relationships between different types of data.",source:"@site/versioned_docs/version-1.0.0/core-concepts/data-models/index.md",sourceDirName:"core-concepts/data-models",slug:"/core-concepts/data-models",permalink:"/docs/core-concepts/data-models",draft:!1,editUrl:"https://github.com/mlcraft-io/docs/tree/main/versioned_docs/version-1.0.0/core-concepts/data-models/index.md",tags:[],version:"1.0.0",sidebarPosition:1,frontMatter:{id:"data-models",title:"Data Models",slug:"/core-concepts/data-models",sidebar_position:1,description:"Data models are the foundation of the Synmetrix platform. They are used to define the structure of data and the relationships between different types of data."},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/docs/core-concepts"},next:{title:"SQL Interface (SQL API)",permalink:"/docs/core-concepts/sql-interface"}},o={},u=[{value:"1. Creating a Cube in Synmetrix",id:"1-creating-a-cube-in-synmetrix",level:2},{value:"2. Integrating Measures and Dimensions",id:"2-integrating-measures-and-dimensions",level:2},{value:"3. Applying Filters to Measures",id:"3-applying-filters-to-measures",level:2},{value:"4. Crafting Calculated Measures",id:"4-crafting-calculated-measures",level:2},{value:"5. Next Steps",id:"5-next-steps",level:2}],p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-data-modeling-in-synmetrix"},"Getting Started with Data Modeling in Synmetrix"),(0,r.kt)("p",null,"Synmetrix employs the Cube data model framework to turn raw data into strategic business insights and to pre-aggregate data for optimal querying efficiency. This data model is accessible through Synmetrix's querying API, enabling users to perform a wide array of analytical queries without needing to modify the data model directly."),(0,r.kt)("p",null,"Consider an example using a ",(0,r.kt)("inlineCode",{parentName:"p"},"users")," table with the following structure:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"paying"),(0,r.kt)("th",{parentName:"tr",align:null},"city"),(0,r.kt)("th",{parentName:"tr",align:null},"company_name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"San Francisco"),(0,r.kt)("td",{parentName:"tr",align:null},"Pied Piper")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Palo Alto"),(0,r.kt)("td",{parentName:"tr",align:null},"Raviga")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Redwood"),(0,r.kt)("td",{parentName:"tr",align:null},"Aviato")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Mountain View"),(0,r.kt)("td",{parentName:"tr",align:null},"Bream-Hall")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Santa Cruz"),(0,r.kt)("td",{parentName:"tr",align:null},"Hooli")))),(0,r.kt)("p",null,"From this data, we seek answers to several questions regarding our user base:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Total number of users"),(0,r.kt)("li",{parentName:"ul"},"Number of paying users"),(0,r.kt)("li",{parentName:"ul"},"Percentage of paying users compared to the overall user count"),(0,r.kt)("li",{parentName:"ul"},"Distribution of users, regardless of payment status, across different cities and companies")),(0,r.kt)("p",null,"In Synmetrix, leveraging the Cube data model allows us to avoid crafting individual SQL queries for each question, facilitating the creation of organized and reusable SQL queries."),(0,r.kt)("h2",{id:"1-creating-a-cube-in-synmetrix"},"1. Creating a Cube in Synmetrix"),(0,r.kt)("p",null,"Cubes in Synmetrix, structured around the Cube framework, serve to organize data entities and their interrelations. Typically, a cube corresponds to a database table, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"users"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"orders"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"products"),". We define a base table for each cube using the ",(0,r.kt)("inlineCode",{parentName:"p"},"sql_table")," parameter. For our case, the base table is the ",(0,r.kt)("inlineCode",{parentName:"p"},"users")," table."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"YAML")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"cubes:\n  - name: Users\n    sql_table: users\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"cube(`Users`, {\n  sql_table: `users`,\n});\n")),(0,r.kt)("h2",{id:"2-integrating-measures-and-dimensions"},"2. Integrating Measures and Dimensions"),(0,r.kt)("p",null,"After defining the base table, the next step involves adding measures and dimensions to the cube. Measures refer to quantitative data, like sales volume or user count, while dimensions categorize data, such as by city or company name."),(0,r.kt)("p",null,"Let's add our first measure and dimensions to illustrate:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"YAML")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"cubes:\n  - name: Users\n    sql: SELECT * FROM users\n\n    measures:\n      - name: TotalCount\n        sql: id\n        type: count\n\n    dimensions:\n      - name: City\n        sql: city\n        type: string\n\n      - name: CompanyName\n        sql: company_name\n        type: string\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"cube(`Users`, {\n  sql: `SELECT * FROM users`,\n\n  measures: {\n    TotalCount: {\n      sql: `id`,\n      type: `count`,\n    },\n  },\n\n  dimensions: {\n    City: {\n      sql: `city`,\n      type: `string`,\n    },\n\n    CompanyName: {\n      sql: `company_name`,\n      type: `string`,\n    },\n  },\n});\n")),(0,r.kt)("h2",{id:"3-applying-filters-to-measures"},"3. Applying Filters to Measures"),(0,r.kt)("p",null,"To discern the number of paying users, Synmetrix introduces measure filters, allowing for specific data segmentation:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"YAML")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'cubes:\n  - name: Users\n\n    measures:\n      - name: PayingUsersCount\n        sql: id\n        type: count\n        filters:\n          - sql: "{CUBE}.paying = true"\n\n    # Other definitions...\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"cube(`Users`, {\n  measures: {\n    PayingUsersCount: {\n      sql: `id`,\n      type: `count`,\n      filters: [{ sql: `${CUBE}.paying = true` }],\n    },\n  },\n\n  // Other definitions...\n});\n")),(0,r.kt)("h2",{id:"4-crafting-calculated-measures"},"4. Crafting Calculated Measures"),(0,r.kt)("p",null,"For inquiries like the percentage of paying users relative to the total, Synmetrix simplifies the creation of calculated measures. This enables the comparison of ",(0,r.kt)("inlineCode",{parentName:"p"},"PayingUsersCount")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"TotalCount"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"YAML")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'cubes:\n  - name: Users\n\n    measures:\n      - name: PayingUsersPercentage\n        sql: "100.0 * {PayingUsersCount} / NULLIF({TotalCount}, 0)"\n        type: number\n        format: percent\n\n    # Additional configurations...\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"JavaScript")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"cube(`Users`, {\n  measures: {\n    PayingUsersPercentage: {\n      sql: `100.0 * ${PayingUsersCount} / NULLIF(${TotalCount}, 0)`,\n      type: `number`,\n      format: `percent`,\n    },\n  },\n\n  // Additional configurations...\n});\n")),(0,r.kt)("p",null,"In this approach, Synmetrix not only streamlines the process of data modeling but also enhances the analytical capabilities available to end-users, making it easier to derive meaningful insights from complex data sets."),(0,r.kt)("h2",{id:"5-next-steps"},"5. Next Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cube.dev/docs/product/data-modeling/overview"},"Data models documentation")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cube.dev/docs/reference/data-model/cube"},"Data models reference")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://cube.dev/docs/product/apis-integrations/rest-api/query-format"},"Query format"))))}m.isMDXComponent=!0}}]);