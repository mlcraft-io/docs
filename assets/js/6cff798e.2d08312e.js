"use strict";(self.webpackChunksynmetrix=self.webpackChunksynmetrix||[]).push([[1403],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return a?r.createElement(b,i(i({ref:t},p),{},{components:a})):r.createElement(b,i({ref:t},p))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},876:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const s={id:"database-design",title:"Database Structure Design",sidebar_label:"Database Design",slug:"/architecture-and-design/database-design"},i=void 0,o={unversionedId:"architecture-and-design/database-design/database-design",id:"version-1.1.0/architecture-and-design/database-design/database-design",title:"Database Structure Design",description:"Database Structure",source:"@site/versioned_docs/version-1.1.0/architecture-and-design/database-design/index.md",sourceDirName:"architecture-and-design/database-design",slug:"/architecture-and-design/database-design",permalink:"/docs/architecture-and-design/database-design",draft:!1,editUrl:"https://github.com/mlcraft-io/docs/tree/main/versioned_docs/version-1.1.0/architecture-and-design/database-design/index.md",tags:[],version:"1.1.0",frontMatter:{id:"database-design",title:"Database Structure Design",sidebar_label:"Database Design",slug:"/architecture-and-design/database-design"},sidebar:"tutorialSidebar",previous:{title:"Architecture and design",permalink:"/docs/architecture-and-design"},next:{title:"System Architecture",permalink:"/docs/architecture-and-design/system-architecture"}},c={},l=[{value:"Database Structure",id:"database-structure",level:2},{value:"Database Architecture Description",id:"database-architecture-description",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...s}=e;return(0,n.kt)(d,(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"database-structure"},"Database Structure"),(0,n.kt)("p",null,'The "Synmetrix" database is organized according to the relational database model and includes the following tables:'),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.users"),": Stores information about registered users, including user ID (id), display name (display_name), avatar URL (avatar_url), as well as the creation time and last update time of the record.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.account_providers"),": Describes the relationships between user accounts and their authentication providers.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.accounts"),": Stores information about user accounts, including unique identifiers, email addresses, passwords, and other data.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.providers"),": Provides a list of available authentication providers.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.refresh_tokens"),": Contains information about refresh tokens for each user account.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.roles"),": Manages user roles.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"auth.account_roles"),": Contains information about roles for each account.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.teams"),": Stores information about user teams.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.datasources"),": Contains information about data sources used by users.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.dataschemas"),": Describes data models used to define business metrics for data sources.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.explorations"),": Describes research tasks performed by users.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.members"),": Stores information about team members.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.team_roles"),": Manages user roles within teams.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.member_roles"),": Contains information about roles for each team member.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.reports"),": Contains information about the structure and schedule of reports based on metrics needed by users.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.sql_credentials"),": Manages SQL credentials used to access business metrics through the SQL interface.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"public.alerts"),": Stores information about alerts created by users."))),(0,n.kt)("h2",{id:"database-architecture-description"},"Database Architecture Description"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Database Architecture Description",src:a(8661).Z,width:"1456",height:"1025"})),(0,n.kt)("p",null,"The architecture of the database, including relationships between tables, primary and foreign keys, and indexes, is represented in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mlcraft-io/mlcraft/blob/main/docs/database/mlcraft.dblm"},"Database Markup Language (DBML).")),(0,n.kt)("p",null,"This database structure provides flexibility and scalability to the system, allowing convenient management of users, teams, data sources, reports, and other system elements. Each database table is designed for a specific purpose and can be extended or modified to meet evolving system requirements."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"For the complete DBML representation of the database architecture, please refer to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/mlcraft-io/mlcraft/blob/main/docs/database/mlcraft.dblm"},"Database Markup Language (DBML)"),".")))}u.isMDXComponent=!0},8661:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/db-023beaa42e36d80a50c3286f15a5f557.png"}}]);