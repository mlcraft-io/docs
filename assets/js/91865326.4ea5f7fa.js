"use strict";(self.webpackChunksynmetrix=self.webpackChunksynmetrix||[]).push([[1006],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),l=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},g=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),g=r,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||a;return n?s.createElement(m,i(i({ref:t},u),{},{components:n})):s.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var l=2;l<a;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}g.displayName="MDXCreateElement"},803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(7462),r=(n(7294),n(3905));const a={id:"test-structure",title:"Test Structure",sidebar_label:"Test Structure",slug:"/testing-and-debugging/test-structure"},i="Testing Structure for Synmetrix",o={unversionedId:"testing-and-debugging /tests/test-structure/test-structure",id:"version-1.1.0/testing-and-debugging /tests/test-structure/test-structure",title:"Test Structure",description:"In the development process of Synmetrix, continuous testing plays a crucial role in ensuring system stability and reliability. To automate this process, we utilize the Continuous Integration (CI) tool, specifically the open-source platform StepCI.",source:"@site/versioned_docs/version-1.1.0/testing-and-debugging /tests/test-structure/index.md",sourceDirName:"testing-and-debugging /tests/test-structure",slug:"/testing-and-debugging/test-structure",permalink:"/docs/testing-and-debugging/test-structure",draft:!1,editUrl:"https://github.com/mlcraft-io/docs/tree/main/versioned_docs/version-1.1.0/testing-and-debugging /tests/test-structure/index.md",tags:[],version:"1.1.0",frontMatter:{id:"test-structure",title:"Test Structure",sidebar_label:"Test Structure",slug:"/testing-and-debugging/test-structure"},sidebar:"tutorialSidebar",previous:{title:"Test SQL Interface for Data Models",permalink:"/docs/testing-and-debugging/testing/test-sql-data-models"},next:{title:"Debugging",permalink:"/docs/testing-and-debugging/debugging"}},c={},l=[{value:"Test Structure",id:"test-structure",level:2},{value:"Testing Algorithm",id:"testing-algorithm",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing-structure-for-synmetrix"},"Testing Structure for Synmetrix"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"In the development process of Synmetrix, continuous testing plays a crucial role in ensuring system stability and reliability. To automate this process, we utilize the Continuous Integration (CI) tool, specifically the open-source platform StepCI.")),(0,r.kt)("p",null,"StepCI is employed for writing and conducting integration tests, which verify the correctness of the system's operation when its various components interact with each other. This is particularly vital for projects like Synmetrix, which consist of numerous services and components working collaboratively."),(0,r.kt)("h2",{id:"test-structure"},"Test Structure"),(0,r.kt)("p",null,"All test files are located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"test/stepci")," directory within the Synmetrix project folder. Each file represents an individual test scenario described in YAML format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: change_password\n  http:\n    url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/change-password\n    method: POST\n    headers:\n      Content-Type: application/json\n      Authorization: Bearer ${{captures.accessToken}}\n    body: |\n      {\n        "old_password": "pass321",\n        "new_password": "pass123"\n      }\n    check:\n      status: 204\n')),(0,r.kt)("p",null,'This YAML configuration represents a typical StepCI test scenario named "change_password." It performs a POST request with specific headers and a JSON request body to change a password. The response status is checked to ensure it\'s 204.'),(0,r.kt)("h2",{id:"testing-algorithm"},"Testing Algorithm"),(0,r.kt)("p",null,"Testing on the StepCI platform typically involves the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Request Creation:")," StepCI generates a request based on the input data defined in the test scenario.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Request Sending:")," The request is sent to the tested endpoint in the Synmetrix system.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Waiting for Response:")," StepCI waits for a response from the Synmetrix system. During this time, all necessary actions are performed, such as request processing, interaction with the database, and other services.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Response Verification:")," After receiving the response, StepCI compares it with the expected result defined in the test scenario. If the response matches the expectations, the test is considered passed. Otherwise, StepCI logs an error, and the test is marked as failed."))),(0,r.kt)("p",null,"This testing structure ensures the reliability and stability of the Synmetrix system. Automated testing allows developers to quickly identify and rectify errors, as well as ensure that new changes do not disrupt the functionality of existing features."),(0,r.kt)("p",null,"Upon completing a set of tests, StepCI provides a report with a brief description of the tests that were passed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"PASS datasource_flow 9.458s 1 1620 bytes 1 16006 bytes\nTests: 0 failed, 1 passed, 1 total\nSteps: 0 failed, 0 skipped, 18 passed, 18 total\nTime: 9,533s, estimated 10s\nCO2:\n0.04036g\nWorkflow passed after 9.533s\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Test was passed.")," "),(0,r.kt)("p",null,"In the event of a test failure, StepCI records details, including the name of the failed testing step, input data and parameters, actual and expected results, and error messages obtained during the execution of the tested code. Subsequent test steps are halted upon encountering a failure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'v create_team passed after 0.041s\nv invite_team_member passed after 0.597s \nv create_datasource passed after 0.021s \nv check_connection passed after 0.833s \nv validate_datasource passed after 0.078s \nv fetch_tables passed after 0.436s \n\xd7 gen_dataschemas failed after 0.008s \nA create_exploration skipped after 0s \nA fetch_dataset skipped after Os \nA export_data_models skipped after 0s \nA fetch_meta skipped after 0s \nA run_query skipped after Os\n\n\n\u2022 datasource_flow \u203a gen_dataschemas\n\nRequest HTTP\nPOST http://hasura:8080/v1/graphql HTTP/1.1\nContent-Type: application/json\nAuthorization: Bearer eyJhbci01JIUzI1N1J9.eyJoYXN1cmEiOnsieC1oYXN1cmEtdXNlci1pZCI6IjU5Yjhj\nOTVjLTdIMmEtNDc5Ny1hNjZjLWU1MTc3NmNjZDM5ZSIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMi0\\sidXNlciJdLCJ\n4LWhhc3VyYS1kzwZhdWx0LXJvbGUi0iJ1c2VyInosInN1Yi16IjU5YjhjOTVjLTdl\u2122mEtNDc5Ny1hNjZjLWU1MTc3Nm\nNjZDM5ZSIsImlzcyI6Im5ob3N0IiwiaWF0Ijo\xd7NjkwoDkoNzcOLCJleHAi0jE20TE1NDI3NzR9.DTtp9T\u2020jNg6ABm1v\nV7eB0KXZw6k1d2iZx6C-DFicCw\u2122\n,x-hasura-user-id: 59b8c95c-7e2a-4797-a66c-e51776ccd39e\n{"query": "mutation (#datasource_id: uuid!, $tables: [SourceTable!]!) f\\n gen_dataschemas (d atasource_id: $datasource_id, tables: $tables) f\\n code\\n\nmessageln FInrIn"\uff0c "variabl\nes" :{"datasource_id":"9218058b-160c-4c43-8126-b944612c055f"\n"tables": K{"name": "default/cell\ntowers"},{"name": "default/checks"}1}}\nResponse\nHTTP/1.1 200 OK\ntransfer-encoding: chunked\ndate: Tue 01 Aug 2023 12:59:36 GMT\nserver: Warp/3.3.23\ncontent-type: application/json; charset=utf-8\n{"errors": ["extensions":{"code": "validation-failed", "path":"$.selectionSet. gen_dataschemas args.branch_id"}, "message":"missing required field \'branch_id\'"}1}\nChecks\nJSONPath\n\xd7 $. data.gen_dataschemas.code: undefined (expected ok)\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Test was failed.")))}d.isMDXComponent=!0}}]);