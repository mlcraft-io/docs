"use strict";(self.webpackChunksynmetrix=self.webpackChunksynmetrix||[]).push([[9009],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),m=s,g=p["".concat(o,".").concat(m)]||p[m]||u[m]||l;return a?n.createElement(g,r(r({ref:t},d),{},{components:a})):n.createElement(g,r({ref:t},d))}));function g(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=a.length,r=new Array(l);r[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3502:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(7462),s=(a(7294),a(3905));const l={id:"test-sql-data-models",title:"Test SQL Interface for Data Models",sidebar_label:"Test SQL Interface for Data Models",slug:"/testing-and-debugging/testing/test-sql-data-models"},r="SQL Interface Testing Guide for Data Models",i={unversionedId:"testing-and-debugging /tests/test-sql-data-models /test-sql-data-models",id:"testing-and-debugging /tests/test-sql-data-models /test-sql-data-models",title:"Test SQL Interface for Data Models",description:"Welcome to the SQL Interface Testing Guide for Data Models. This comprehensive guide will walk you through the process of testing SQL interfaces for data models within our system.",source:"@site/docs/testing-and-debugging /tests/test-sql-data-models /index.md",sourceDirName:"testing-and-debugging /tests/test-sql-data-models ",slug:"/testing-and-debugging/testing/test-sql-data-models",permalink:"/docs/next/testing-and-debugging/testing/test-sql-data-models",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/testing-and-debugging /tests/test-sql-data-models /index.md",tags:[],version:"current",frontMatter:{id:"test-sql-data-models",title:"Test SQL Interface for Data Models",sidebar_label:"Test SQL Interface for Data Models",slug:"/testing-and-debugging/testing/test-sql-data-models"},sidebar:"tutorialSidebar",previous:{title:"Trino",permalink:"/docs/next/testing-and-debugging/tests/data-source/trino"},next:{title:"Test Structure",permalink:"/docs/next/testing-and-debugging/test-structure"}},o={},c=[{value:"Section 1: Test Database Credentials",id:"section-1-test-database-credentials",level:2},{value:"Section 2: Adding SQL Interface",id:"section-2-adding-sql-interface",level:2},{value:"Section 3: Generating Data Models",id:"section-3-generating-data-models",level:2},{value:"Section 4: Connecting via SQL Interface with a Postgres Client",id:"section-4-connecting-via-sql-interface-with-a-postgres-client",level:2},{value:"4.1: Connecting via DBeaver",id:"41-connecting-via-dbeaver",level:3},{value:"4.2: Testing SQL Queries",id:"42-testing-sql-queries",level:3},{value:"4.2.1: Sample SQL Queries",id:"421-sample-sql-queries",level:4}],d={toc:c},p="wrapper";function u(e){let{components:t,...l}=e;return(0,s.kt)(p,(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"sql-interface-testing-guide-for-data-models"},"SQL Interface Testing Guide for Data Models"),(0,s.kt)("p",null,"Welcome to the SQL Interface Testing Guide for Data Models. This comprehensive guide will walk you through the process of testing SQL interfaces for data models within our system."),(0,s.kt)("h2",{id:"section-1-test-database-credentials"},"Section 1: Test Database Credentials"),(0,s.kt)("p",null,"Before you begin testing, you'll need the following Postgres database credentials:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Type: Postgres"),(0,s.kt)("li",{parentName:"ul"},"Host: demo-db.cube.dev"),(0,s.kt)("li",{parentName:"ul"},"Port: 5432"),(0,s.kt)("li",{parentName:"ul"},"User: cube"),(0,s.kt)("li",{parentName:"ul"},"Password: 12345"),(0,s.kt)("li",{parentName:"ul"},"Database Name: ecom")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Connecting to Data source",src:a(8445).Z,width:"1004",height:"592"})),(0,s.kt)("h2",{id:"section-2-adding-sql-interface"},"Section 2: Adding SQL Interface"),(0,s.kt)("p",null,"To add an SQL interface, follow these steps:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},'Go to the Settings > SQL API and Click to the  "Attach SQL API" button.'),(0,s.kt)("li",{parentName:"ol"},'Select the data source for connection; in our case, it\'s "Ecom (demo db)."'),(0,s.kt)("li",{parentName:"ol"},'Enter your login and password or use the default ones (login: "test" and password: "test").'),(0,s.kt)("li",{parentName:"ol"},'Click "Connect new."')),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Attach SQL API",src:a(2249).Z,width:"1500",height:"1000"}),"\n",(0,s.kt)("img",{alt:"SQL API",src:a(5985).Z,width:"1500",height:"1000"})),(0,s.kt)("h2",{id:"section-3-generating-data-models"},"Section 3: Generating Data Models"),(0,s.kt)("p",null,'Refer to the guide in Appendix V.2 for generating data models. For "Ecom (demo db)," you\'ll need to generate data models for the following tables:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Line Items"),(0,s.kt)("li",{parentName:"ul"},"Line Items Count by States"),(0,s.kt)("li",{parentName:"ul"},"Orders"),(0,s.kt)("li",{parentName:"ul"},"Product Categories"),(0,s.kt)("li",{parentName:"ul"},"Products"),(0,s.kt)("li",{parentName:"ul"},"Suppliers"),(0,s.kt)("li",{parentName:"ul"},"Users")),(0,s.kt)("p",null,"This will result in the following list of data models:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"LineItems.yml"),(0,s.kt)("li",{parentName:"ul"},"LineItemsCountByStates.yml"),(0,s.kt)("li",{parentName:"ul"},"Orders.yml"),(0,s.kt)("li",{parentName:"ul"},"ProductCategories.yml"),(0,s.kt)("li",{parentName:"ul"},"Products.yml"),(0,s.kt)("li",{parentName:"ul"},"Suppliers.yml"),(0,s.kt)("li",{parentName:"ul"},"Users.yml")),(0,s.kt)("p",null,"Each script is labeled with its corresponding name, which is also the table name when accessing via the SQL interface."),(0,s.kt)("h2",{id:"section-4-connecting-via-sql-interface-with-a-postgres-client"},"Section 4: Connecting via SQL Interface with a Postgres Client"),(0,s.kt)("p",null,"We recommend using DBeaver of any version (",(0,s.kt)("a",{parentName:"p",href:"https://dbeaver.io/"},"https://dbeaver.io/"),") for connecting. However, our connection has also been tested with the following tools:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/app-psql.html"},"psql CLI")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://superset.apache.org/"},"Apache Superset")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.tableau.com/cloud"},"Tableau Cloud")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.tableau.com/"},"Tableau Desktop with JDBC driver")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://powerbi.microsoft.com/"},"Power BI")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.metabase.com/"},"Metabase")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://datastudio.google.com/"},"Google Data Studio")),(0,s.kt)("li",{parentName:"ul"},"Excel through ",(0,s.kt)("a",{parentName:"li",href:"https://www.devart.com/excel-addins/"},"Devart plugin")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://deepnote.com/"},"Deepnote")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://hex.pm/"},"Hex")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://observablehq.com/"},"Observable")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://streamlit.io/"},"Streamlit")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://jupyter.org/"},"Jupyter notebook")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://hightouch.io/"},"Hightouch"))),(0,s.kt)("h3",{id:"41-connecting-via-dbeaver"},"4.1: Connecting via DBeaver"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Connecting via DBeaver",src:a(9064).Z,width:"3590",height:"1003"})),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Create a new PostgresSQL connection.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Enter the credentials provided when setting up the SQL interface. In this example:"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Host: localhost"),(0,s.kt)("li",{parentName:"ul"},"Port: 15432"),(0,s.kt)("li",{parentName:"ul"},"Database: ecom (you can specify any value)"),(0,s.kt)("li",{parentName:"ul"},"Username: test"),(0,s.kt)("li",{parentName:"ul"},"Password: test\n",(0,s.kt)("img",{alt:"Connecting via DBeaver",src:a(5378).Z,width:"3598",height:"2196"})))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},'Click "Test Connection" to verify the connection.\n',(0,s.kt)("img",{alt:"Connecting via DBeaver",src:a(2397).Z,width:"1572",height:"891"}))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},'Click "Finish" and save the connection.')),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Go to the SQL console to test SQL queries against the data models.\n",(0,s.kt)("img",{alt:"Connecting via DBeaver",src:a(5495).Z,width:"1232",height:"1205"})))),(0,s.kt)("h3",{id:"42-testing-sql-queries"},"4.2: Testing SQL Queries"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Testing SQL Queries",src:a(1572).Z,width:"3585",height:"2205"})),(0,s.kt)("p",null,"Start writing queries for the generated data models following the steps outlined in Appendix D.3."),(0,s.kt)("h4",{id:"421-sample-sql-queries"},"4.2.1: Sample SQL Queries"),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM orders ORDER BY created_at LIMIT 3;\n")),(0,s.kt)("p",null,"Response:\n",(0,s.kt)("img",{alt:"Testing SQL Queries",src:a(2882).Z,width:"2400",height:"1390"})),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT p.name, SUM(o.count) FROM orders o CROSS JOIN products p GROUP BY 1 LIMIT 5;\n")),(0,s.kt)("p",null,"Response:\n",(0,s.kt)("img",{alt:"Testing SQL Queries",src:a(8748).Z,width:"2348",height:"1419"})),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MEASURE(count), status, DATE_TRUNC('month', created_at) date FROM orders GROUP BY date, status ORDER BY date ASC;\n")),(0,s.kt)("p",null,"Response:\n",(0,s.kt)("img",{alt:"Testing SQL Queries",src:a(3507).Z,width:"2378",height:"2069"})),(0,s.kt)("p",null,"Query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  city,\n  CASE\n    WHEN status = 'shipped' THEN 'done'\n    ELSE 'in-progress'\n  END real_status,\n  SUM(amount) AS total\nFROM (\n  SELECT\n    users.city AS city,\n    SUM(number) AS amount,\n    orders.status\n  FROM orders\n    CROSS JOIN users\n  GROUP BY 1, 3\n) AS inner\nGROUP BY 1, 2\nORDER BY 1;\n")),(0,s.kt)("p",null,"Response:\n",(0,s.kt)("img",{alt:"Testing SQL Queries",src:a(5629).Z,width:"2486",height:"2070"})))}u.isMDXComponent=!0},8445:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test1-3e0222de709d99c9ad7c1c7c30b171d2.png"},2882:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test10-550302b5cd2f9ac087ee018be497af59.png"},8748:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test11-af27c23c4b385e614e6aa83e7f87ded2.png"},3507:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test12-9e7e397947df9a965008e771802c7467.png"},5629:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test13-08b9177ac5aca3efaa9b0331dbf9e3fa.png"},2249:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test2-0f31cb2a571c5303b7767be5e7038eb5.png"},5985:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test3-8db446d6ccf04c206623446fe2d32658.png"},9064:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test5-9f84899f3a844d65606ba255be398412.png"},5378:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test6-c521e0774b7ab41b540ccb394e0b57a2.png"},2397:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test7-a3f1ca88ec39a1f57a08f7299f3f4e68.png"},5495:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test8-3dff8fb823fab70718f5aac5c1dd58f7.png"},1572:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/sql-test9-664afe0ac4d96d75fb255b4c2f76293e.png"}}]);